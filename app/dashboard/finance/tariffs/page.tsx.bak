"use client"
import React, { useState, useEffect } from 'react'
import Navbar from '@/components/dashboard/Navbar'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { 
  ArrowLeft, 
  Plus, 
  Edit, 
  Trash2, 
  Search, 
  Filter,
  Calculator,
  CreditCard,
  Smartphone,
  Building2,
  Zap,
  DollarSign,
  Eye,
  RefreshCw,
  AlertTriangle,
  ChevronRight,
  Store
} from 'lucide-react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import toast from 'react-hot-toast'
import { usePermissions, PERMISSIONS } from '@/lib/hooks/usePermissions'
import { PermissionGuard } from '@/components/ui/PermissionGuard'
import { useQuery } from '@tanstack/react-query'
import api from '@/lib/axios'

interface Tariff {
  id: string
  name: string
  description: string
  tariffType: 'INTERNAL' | 'EXTERNAL'
  transactionType: string
  currency: string
  feeType: 'FIXED' | 'PERCENTAGE' | 'HYBRID'
  feeAmount: number
  feePercentage: number
  minFee: number
  maxFee: number
  minAmount: number
  maxAmount: number
  userType: 'STAFF' | 'SUBSCRIBER' | 'MERCHANT'
  subscriberType: 'INDIVIDUAL' | 'BUSINESS' | null
  partnerId?: string
  group?: string // Tariff group (G1, G2, G3) for partner-specific amount ranges
  partner?: {
  telecomBankCharge?: number // Telecom/Bank charge (optional)    partnerName: string
    partnerCode: string
  }
  isActive?: boolean
  createdAt?: string
  updatedAt?: string
}

interface Partner {
  id: string
  name: string
  status: string
  type: string
}

const TariffsPage = () => {
  const router = useRouter()
  const [activeMainTab, setActiveMainTab] = useState('internal')
  const [activeInternalTab, setActiveInternalTab] = useState('wallet-to-wallet')
  const [activeExternalTab, setActiveExternalTab] = useState('wallet-to-mobile')
  const [selectedPartner, setSelectedPartner] = useState("ABC") // Default to ABC
  const [isLoading, setIsLoading] = useState(false)
  
  const { hasPermission, userRole } = usePermissions()
  const canManageTariffs = hasPermission(PERMISSIONS.TARIFFS_CREATE) || hasPermission(PERMISSIONS.TARIFFS_UPDATE) || hasPermission(PERMISSIONS.TARIFFS_DELETE) || userRole === 'SUPER_ADMIN'
  
  // Fetch tariffs from API
  const { data: tariffsData, isLoading: tariffsLoading, error: tariffsError, refetch } = useQuery({
    queryKey: ['tariffs'],
    queryFn: () => api.get('/finance/tariffs').then(res => res.data),
    staleTime: 5 * 60 * 1000,
  })

  // Internal transaction types (RukaPay internal operations)
  const internalTransactionTypes = {
    'TRANSFER_OUT': {
      name: 'Wallet to Wallet',
      description: 'RukaPay to RukaPay transfers',
      icon: CreditCard,
      color: 'bg-blue-500',
      tabId: 'wallet-to-wallet'
    },
    'WALLET_TO_INTERNAL_MERCHANT': {
      name: 'Wallet to Internal Merchant',
      description: 'Payments to RukaPay registered merchants',
      icon: Store,
      color: 'bg-indigo-500',
      tabId: 'wallet-to-internal-merchant'
    }
  }

  // External transaction types (Partner integrations)
  const externalTransactionTypes = {
    'WITHDRAWAL': {
      name: 'Wallet to Mobile',
      description: 'RukaPay to MTN/AIRTEL via partners',
      icon: Smartphone,
      color: 'bg-green-500',
      tabId: 'wallet-to-mobile'
    },
    'WALLET_TO_EXTERNAL_MERCHANT': {
      name: 'Wallet to External Merchant',
      description: 'Payments to external merchants via partners',
      icon: Building2,
      color: 'bg-purple-500',
      tabId: 'wallet-to-external-merchant'
    },
    'DEPOSIT': {
      name: 'Wallet to Bank',
      description: 'RukaPay to Bank transfers via partners',
      icon: Building2,
      color: 'bg-orange-500',
      tabId: 'wallet-to-bank'
    },
    'BILL_PAYMENT': {
      name: 'Bill Payment',
      description: 'School fees, Utility bills via partners',
      icon: Zap,
      color: 'bg-purple-600',
      tabId: 'bill-payment'
    },
    'MERCHANT_WITHDRAWAL': {
      name: 'Merchant Withdrawal',
      description: 'Merchants withdrawing to bank/MNO via partners',
      icon: DollarSign,
      color: 'bg-amber-600',
      tabId: 'merchant-withdrawal'
    }
  }

  // Get tariffs from API response
  const allTariffs = tariffsData?.tariffs || []
  
  // Separate internal and external tariffs
  const internalTariffs = allTariffs.filter((t: Tariff) => t.tariffType === 'INTERNAL')
  const externalTariffs = allTariffs.filter((t: Tariff) => t.tariffType === 'EXTERNAL')
  
  // Group internal tariffs by transaction type
  const internalGroupedTariffs = {
    'TRANSFER_OUT': internalTariffs.filter((t: Tariff) => t.transactionType === 'TRANSFER_OUT'),
    'WALLET_TO_INTERNAL_MERCHANT': internalTariffs.filter((t: Tariff) => t.transactionType === 'WALLET_TO_INTERNAL_MERCHANT'),
  }
  
  // Group external tariffs by transaction type
  const externalGroupedTariffs = {
    'WITHDRAWAL': externalTariffs.filter((t: Tariff) => t.transactionType === 'WITHDRAWAL'),
    'WALLET_TO_EXTERNAL_MERCHANT': externalTariffs.filter((t: Tariff) => t.transactionType === 'WALLET_TO_EXTERNAL_MERCHANT'),
    'DEPOSIT': externalTariffs.filter((t: Tariff) => t.transactionType === 'DEPOSIT'),
    'BILL_PAYMENT': externalTariffs.filter((t: Tariff) => t.transactionType === 'BILL_PAYMENT'),
    'MERCHANT_WITHDRAWAL': externalTariffs.filter((t: Tariff) => t.transactionType === 'MERCHANT_WITHDRAWAL'),
  }

  // Get available transaction types from actual data
  const availableInternalTypes = Object.keys(internalTransactionTypes).filter(type => 
    internalGroupedTariffs[type as keyof typeof internalGroupedTariffs].length > 0
  )
  
  const availableExternalTypes = Object.keys(externalTransactionTypes).filter(type => 
    externalGroupedTariffs[type as keyof typeof externalGroupedTariffs].length > 0
  )

  const handleDeleteTariff = async (tariffId: string) => {
    if (!window.confirm('Are you sure you want to delete this tariff?')) {
      return
    }

    setIsLoading(true)
    try {
      const response = await fetch(`/finance/tariffs/${tariffId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        toast.success('Tariff deleted successfully')
        refetch() // Refresh the data
      } else {
        throw new Error('Failed to delete tariff')
      }
    } catch (error) {
      toast.error('Failed to delete tariff')
    } finally {
      setIsLoading(false)
    }
  }

  const formatFeeAmount = (tariff: Tariff) => {
    if (tariff.feeType === 'FIXED') {
      return `${tariff.feeAmount} ${tariff.currency}`
    } else if (tariff.feeType === 'PERCENTAGE') {
      return `${(tariff.feePercentage * 100).toFixed(2)}%`
    } else if (tariff.feeType === 'HYBRID') {
      return `${tariff.feeAmount} ${tariff.currency} + ${(tariff.feePercentage * 100).toFixed(2)}%`
    }
    return 'N/A'
  }

  const getAmountRange = (tariff: Tariff) => {
    if (tariff.minAmount && tariff.maxAmount) {
      return `${tariff.minAmount.toLocaleString()} - ${tariff.maxAmount.toLocaleString()} ${tariff.currency}`
    } else if (tariff.minAmount) {
      return `Above ${tariff.minAmount.toLocaleString()} ${tariff.currency}`
    } else if (tariff.maxAmount) {
      return `Below ${tariff.maxAmount.toLocaleString()} ${tariff.currency}`
    }
    return 'No limit'
  }

  const handleRefresh = async () => {
    setIsLoading(true)
    try {
      await refetch()
      toast.success('Tariffs refreshed successfully')
    } catch (error) {
      toast.error('Failed to refresh tariffs')
    } finally {
      setIsLoading(false)
    }
  }

  const TariffTable = ({ type, tariffs }: { type: string, tariffs: Tariff[] }) => {
    // Check both internal and external transaction types
    const config = internalTransactionTypes[type as keyof typeof internalTransactionTypes] || 
                  externalTransactionTypes[type as keyof typeof externalTransactionTypes]
    if (!config) return null

    return (
      <div className="space-y-4">
        <div className="flex items-center space-x-3 mb-6">
          <div className={`w-12 h-12 ${config.color} rounded-xl flex items-center justify-center`}>
            <config.icon className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-xl font-semibold">{config.name}</h3>
            <p className="text-gray-600">{config.description}</p>
          </div>
        </div>
        
        {tariffs.length === 0 ? (
          <Card>
            <CardContent className="py-8 text-center">
              <p className="text-gray-500">No tariffs configured for this transaction type</p>
              {canManageTariffs && (
                <Button className="mt-4" onClick={() => router.push('/dashboard/finance/tariffs/create')}>
                  <Plus className="w-4 h-4 mr-2" />
                  Create Tariff
                </Button>
              )}
            </CardContent>
          </Card>
        ) : (
          <div className="border rounded-lg">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Description</TableHead>
                  <TableHead>Fee Type</TableHead>
                  <TableHead>Fee Amount</TableHead>
                  <TableHead>Amount Range</TableHead>
                  <TableHead>Transaction Type</TableHead>
                  <TableHead>Partner</TableHead>
                  <TableHead>Group</TableHead>                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                  <TableHead>Partner Fee</TableHead>
                  <TableHead>RukaPay Fee</TableHead>
                  <TableHead>Telecom/Bank Charge</TableHead>                </TableRow>
              </TableHeader>
              <TableBody>
                {tariffs.map((tariff) => (
                  <TableRow key={tariff.id}>
                    <TableCell className="font-medium">{tariff.name}</TableCell>
                    <TableCell className="text-sm text-gray-600">{tariff.description}</TableCell>
                    <TableCell>
                      <Badge variant="outline">{tariff.feeType}</Badge>
                    </TableCell>
                    <TableCell className="font-semibold">{formatFeeAmount(tariff)}</TableCell>
                    <TableCell className="text-sm">{getAmountRange(tariff)}</TableCell>
                    <TableCell className="text-sm">
                      {tariff.userType} • {tariff.subscriberType || 'N/A'}
                    </TableCell>
                    <TableCell className="text-sm">
                      {tariff.partner ? (
                        <Badge variant="outline" className="text-xs">
                          {tariff.partner.partnerCode}
                        </Badge>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </TableCell>
                    <TableCell className="text-sm">
                      {tariff.group ? (
                        <Badge variant="outline" className="text-xs">
                          {tariff.group}
                        </Badge>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </TableCell>                    <TableCell>
                      <Badge variant={tariff.isActive !== false ? "default" : "secondary"}>
                    <TableCell className="text-sm">
                      {tariff.partnerFee ? (
                        <span className="font-medium">{tariff.partnerFee} {tariff.currency}</span>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </TableCell>
                    <TableCell className="text-sm">
                      {tariff.rukapayFee ? (
                        <span className="font-medium">{tariff.rukapayFee} {tariff.currency}</span>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </TableCell>
                    <TableCell className="text-sm">
                      {tariff.telecomBankCharge ? (
                        <span className="font-medium">{tariff.telecomBankCharge} {tariff.currency}</span>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </TableCell>                        {tariff.isActive !== false ? 'Active' : 'Inactive'}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex items-center justify-end space-x-2">
                        {canManageTariffs && (
                          <>
                            <Button variant="ghost" size="sm">
                              <Eye className="w-4 h-4" />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => router.push(`/dashboard/finance/tariffs/edit/${tariff.id}`)}
                            >
                              <Edit className="w-4 h-4" />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => handleDeleteTariff(tariff.id)}
                              disabled={isLoading}
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </div>
    )
  }

  if (tariffsError) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <main className="p-6">
          <div className="max-w-7xl mx-auto">
            <div className="flex items-center justify-center min-h-[60vh]">
              <div className="text-center">
                <AlertTriangle className="h-16 w-16 text-red-500 mx-auto mb-4" />
                <h1 className="text-2xl font-bold text-gray-900 mb-2">Failed to Load Tariffs</h1>
                <p className="text-gray-600 mb-4">Unable to retrieve tariff data from the server.</p>
                <Button onClick={handleRefresh} disabled={isLoading}>
                  <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                  Try Again
                </Button>
              </div>
            </div>
          </div>
        </main>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <main className="p-6">
        <div className="max-w-7xl mx-auto">
          {/* Breadcrumbs */}
          <div className="mb-4">
            <nav className="flex items-center space-x-2 text-sm text-gray-600">
              <Link href="/dashboard/finance" className="hover:text-[#08163d]">
                Finance
              </Link>
              <ChevronRight className="h-4 w-4" />
              <span className="text-gray-900 font-medium">Tariffs</span>
            </nav>
          </div>

          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-4">
                <Link href="/dashboard/finance">
                  <Button variant="outline" size="sm" className="flex items-center gap-2">
                    <ArrowLeft className="h-4 w-4" />
                    Back to Finance
                  </Button>
                </Link>
                <div>
                  <h1 className="text-3xl font-bold text-gray-900">Tariff Management</h1>
                  <p className="text-gray-600">Manage transaction fees and charges across partners & payment types</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleRefresh}
                  disabled={isLoading}
                >
                  <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                  Refresh
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => router.push('/dashboard/finance/partners')}
                >
                  <Building2 className="h-4 w-4 mr-2" />
                  Manage Partners
                </Button>
                {canManageTariffs && (
                  <Button onClick={() => router.push('/dashboard/finance/tariffs/create')}>
                    <Plus className="h-4 w-4 mr-2" />
                    Create Tariff
                  </Button>
                )}
              </div>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Tariff Management</h1>
            <p className="text-gray-600">Manage transaction fees and charges for different payment types</p>
          </div>

          {/* Main Tabs for Internal vs External */}
          <Tabs value={activeMainTab} onValueChange={setActiveMainTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="internal" className="flex items-center space-x-2">
                <Building2 className="w-4 h-4" />
                <span>Internal Tariffs ({internalTariffs.length})</span>
              </TabsTrigger>
              <TabsTrigger value="external" className="flex items-center space-x-2">
                <Zap className="w-4 h-4" />
                <span>External Tariffs ({externalTariffs.length})</span>
              </TabsTrigger>
            </TabsList>

            {/* Internal Tariffs Tab */}
            <TabsContent value="internal">
              {tariffsLoading ? (
                <Card>
                  <CardContent className="py-8 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Loading internal tariffs...</p>
                  </CardContent>
                </Card>
              ) : availableInternalTypes.length > 0 ? (
                <Tabs value={activeInternalTab} onValueChange={setActiveInternalTab} className="space-y-6">
                  <TabsList className="grid w-full" style={{ gridTemplateColumns: `repeat(${availableInternalTypes.length}, 1fr)` }}>
                    {availableInternalTypes.map((type) => {
                      const config = internalTransactionTypes[type as keyof typeof internalTransactionTypes]
                      if (!config) return null
                      return (
                        <TabsTrigger key={type} value={config.tabId} className="flex items-center space-x-2">
                          <config.icon className="w-4 h-4" />
                          <span className="hidden sm:inline">{config.name}</span>
                        </TabsTrigger>
                      )
                    })}
                  </TabsList>

                  {availableInternalTypes.map((type) => {
                    const config = internalTransactionTypes[type as keyof typeof internalTransactionTypes]
                    if (!config) return null
                    return (
                      <TabsContent key={type} value={config.tabId}>
                        <TariffTable type={type} tariffs={internalGroupedTariffs[type as keyof typeof internalGroupedTariffs]} />
                      </TabsContent>
                    )
                  })}
                </Tabs>
              ) : (
                <Card>
                  <CardContent className="py-8 text-center">
                    <Building2 className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No Internal Tariffs</h3>
                    <p className="text-gray-500">No internal tariffs configured yet.</p>
                    {canManageTariffs && (
                      <Button className="mt-4" onClick={() => router.push('/dashboard/finance/tariffs/create')}>
                        <Plus className="w-4 h-4 mr-2" />
                        Create Internal Tariff
                      </Button>
                    )}
                  </CardContent>
                </Card>
              )}
            </TabsContent>

            {/* External Tariffs Tab */}
            <TabsContent value="external">
              {tariffsLoading ? (
                <Card>
                  <CardContent className="py-8 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Loading external tariffs...</p>
                  </CardContent>
                </Card>
              ) : availableExternalTypes.length > 0 ? (
                <Tabs value={activeExternalTab} onValueChange={setActiveExternalTab} className="space-y-6">
                  <TabsList className="grid w-full" style={{ gridTemplateColumns: `repeat(${availableExternalTypes.length}, 1fr)` }}>
                    {availableExternalTypes.map((type) => {
                      const config = externalTransactionTypes[type as keyof typeof externalTransactionTypes]
                      if (!config) return null
                      return (
                        <TabsTrigger key={type} value={config.tabId} className="flex items-center space-x-2">
                          <config.icon className="w-4 h-4" />
                          <span className="hidden sm:inline">{config.name}</span>
                        </TabsTrigger>
                      )
                    })}
                  </TabsList>

                  {availableExternalTypes.map((type) => {
                    const config = externalTransactionTypes[type as keyof typeof externalTransactionTypes]
                    if (!config) return null
                    return (
                      <TabsContent key={type} value={config.tabId}>
                        <TariffTable type={type} tariffs={externalGroupedTariffs[type as keyof typeof externalGroupedTariffs]} />
                      </TabsContent>
                    )
                  })}
                </Tabs>
              ) : (
                <Card>
                  <CardContent className="py-8 text-center">
                    <Zap className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No External Tariffs</h3>
                    <p className="text-gray-500">No external tariffs configured yet.</p>
                    {canManageTariffs && (
                      <Button className="mt-4" onClick={() => router.push('/dashboard/finance/tariffs/create')}>
                        <Plus className="w-4 h-4 mr-2" />
                        Create External Tariff
                      </Button>
                    )}
                  </CardContent>
                </Card>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </main>
    </div>
  )
}

export default TariffsPage 